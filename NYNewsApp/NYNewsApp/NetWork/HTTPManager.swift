//
//  HTTPManager.swift
//  NYNewsApp
//
//  Created by iLeafiMac on 25/01/22.
//

import Foundation

enum HTTPError: Error {
    case invalidURL
    case noInternet
    case genericError(GenericError?)
}
public struct GenericError : Decodable {
    let errors : String
}
class HTTPManager<T:URLSessionProtocol> {
    /// A URLProtocol instance that is replaced by the URLSession in production code
    

    // internal not fileprivate
    let session: T
    

    required init(session: T) {
        self.session = session
    }
    
    /// Errors that will be generated by the HTTPManager
    

    public func request<R:Codable>(urlString: String,model: R.Type, completionBlock: @escaping (Result<R, Error>) -> Void) {
      
        guard let url = URL(string: urlString) else {
            completionBlock(.failure(HTTPError.genericError(GenericError(errors:"Invalid url"))))
            return
        }
        
        let jsonDecoder = JSONDecoder()
        let request = HttpRequest.request(method: .GET, url: url)

        let task = session.dataTask(with: request) { data, response, error in
            guard error == nil else {
                completionBlock(.failure(error!))
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse,
                200 ..< 300 ~= httpResponse.statusCode else {
                    if let receivedData = data {
                        let responseModel = try? jsonDecoder.decode(GenericError.self, from: receivedData)
                        completionBlock(.failure(HTTPError.genericError(responseModel)))
                    }
                    return
            }
            // if passed guard
            if let data = data {
                let decoder = JSONDecoder()
                if let userResponse = try? decoder.decode(model, from: data) {
                    completionBlock(Result.success(userResponse))
                }
                
            }
        }
        task.resume()
    }
}

